<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->
<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->
<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:
* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements
-->
<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
	<metadata>
		<!-- == PACKAGE SPECIFIC SECTION == -->
		<!-- This section is about this package, although id and version have ties back to the software -->
		<!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
		<!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
		<id>komodo-ide</id>
		<!-- version should MATCH as closely as possible with the underlying software -->
		<!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
		<!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
		<version>12.0.1</version>
		<packageSourceUrl>https://github.com/mikeee/ChocoPackages/tree/master/automatic/komodo-ide</packageSourceUrl>
		<!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
		<owners>mikeee</owners>
		<!-- ============================== -->
		<!-- == SOFTWARE SPECIFIC SECTION == -->
		<!-- This section is about the software itself -->
		<title>Komodo IDE</title>
		<authors>ActiveState Software Inc.</authors>
		<!-- projectUrl is required for the community feed -->
		<projectUrl>https://www.activestate.com/products/komodo-ide/</projectUrl>
		<iconUrl>https://cdn.jsdelivr.net/gh/mikeee/ChocoPackages/icons/komodo-ide.png</iconUrl>
		<copyright>Copyright (c) 2020 ActiveState Software Inc.</copyright>
		<!-- If there is a license Url available, it is is required for the community feed -->
		<licenseUrl>https://www.activestate.com/products/komodo-ide/license-agreement/</licenseUrl>
		<requireLicenseAcceptance>false</requireLicenseAcceptance>
		<!--<projectSourceUrl></projectSourceUrl>-->
		<!--<docsUrl></docsUrl>-->
		<!--<mailingListUrl></mailingListUrl>-->
		<!--<bugTrackerUrl></bugTrackerUrl>-->
		<tags>komodo ide code editor development dev golang ruby php perl</tags>
		<summary>Code faster with the Komodo IDE.</summary>
		<description>## Features

**Komodo ActiveState Platform Integration**  
Komodo 12 is now integrated with the ActiveState Platform. The Platform automatically builds runtime environments – just choose your packages and it resolves all dependencies for you. Also included is the State Tool CLI, which lets you reclaim coding time by automating one-off tasks.

**Revamped Code Intelligence**  
Autocomplete is more robust and triggers from any position. The symbol browser focuses on simplicity, and you can quickly filter symbols using the new symbol list – all with overall faster performance.

**Print Debugging**  
Is running the full debugger is a bit much, but toggling between print statements gets tiresome? Now you can quickly toggle print statements as well as easily create them, simply by clicking the editor margin.

**DevDocs.&#8203;io Integration**  
Highlight any word or code snippet and trigger the relevant language docs in DevDocs.&#8203;io from inside Komodo, making the process of looking up documentation much simpler. It even works when you’re offline.

**Live Previewing**  
No need to switch back and forth between your browser and editor. Now you can edit your HTML and markdown and test it all without leaving your IDE. Your preview will automatically reload whenever you edit the file – saving not required.

**Project/Folder/File Templates**  
Automate your workflow with provided templates for Python, Go, PHP and HTML, or create your own. You can even link to remote zip files on GitHub to hook projects into Komodo.

**Project Wizard**  
Project creation is now easier with the Project Wizard. Bootstrap a new project with the template of your choice, specify settings as needed and start developing right away.

**Dependency Detector**  
Komodo automatically scans and detects third-party dependencies, giving you immediate insight on what works, and letting you further adjust as needed. Maintain control while minimizing configuration time.

**Universal Package Manager**  
Access your package manager with one button and run commands directly within the editor, with support for Python (pip), PHP (Composer), Perl (PPM), Ruby (Gem) and Node.js (npm and Yarn).

**Clipboard Manager**  
Press shortcut key Ctrl + Shift + V (default keybindings) to bring up your last 10 clipboard entries. Convenient!

**Auto-Formatting**  
Auto-format a file on save, or access formatting options with a new sidebar button. Great for Go coding in particular.

**Added Tooling for PHP**  
We’ve added more tools for Drupal, Laravel and WordPress, including snippets, tutorials and userscripts. With expanded toolboxes, it’s even easier to get set up and configured, especially for remote debugging.

### And much more!

* Asynchronous remote files – work with remote files way faster
* JSHint 2.9.5 linting for enhanced JavaScript (ES6) support
* SDK availability
* Project template for Komodo add-ons
* User interface enhancements
* Refreshed, comprehensive documentation

**NOTE**: This package is automatically updated. If it is out of date and there is no newer package submitted, please use the `Contact Maintainers` functionality to alert me.
</description>
		<releaseNotes>https://docs.activestate.com/komodo/12/get/relnotes/</releaseNotes>
		<!-- =============================== -->
		<!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
		<!-- <dependencies> -->
			<!-- <dependency id="autohotkey" /> -->
			<!-- <dependency id="" version="[__EXACT_VERSION__]" /> -->
			<!-- <dependency id="chocolatey" version="0.10.8" /> -->
			<!-- <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" /> -->
			<!-- <dependency id="" /> -->
			<!-- <dependency id="chocolatey-uninstall.extension" /> -->
		<!-- </dependencies> -->
		<!-- chocolatey-uninstall.extension - If supporting 0.9.9.x (or below) and including a chocolateyUninstall.ps1 file to uninstall an EXE/MSI, you probably want to include chocolatey-uninstall.extension as a dependency. Please verify whether you are using a helper function from that package. -->
		<!--<provides>NOT YET IMPLEMENTED</provides>-->
		<!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
		<!--<replaces>NOT YET IMPLEMENTED</replaces>-->
	</metadata>
	<files>
		<!-- this section controls what actually gets packaged into the Chocolatey package -->
		<file src="tools\**" target="tools" />
		<!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
	</files>
</package>