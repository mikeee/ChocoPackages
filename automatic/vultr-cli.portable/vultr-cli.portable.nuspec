<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->
<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->
<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:
* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements
-->
<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
	<metadata>
		<!-- == PACKAGE SPECIFIC SECTION == -->
		<!-- This section is about this package, although id and version have ties back to the software -->
		<!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
		<!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
		<id>vultr-cli.portable</id>
		<!-- version should MATCH as closely as possible with the underlying software -->
		<!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
		<!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
		<version>3.7.0</version>
		<packageSourceUrl>https://github.com/mikeee/ChocoPackages/tree/master/automatic/vultr-cli.portable</packageSourceUrl>
		<!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
		<owners>mikeee</owners>
		<!-- ============================== -->
		<!-- == SOFTWARE SPECIFIC SECTION == -->
		<!-- This section is about the software itself -->
		<title>vultr-cli (Portable)</title>
		<authors>Vultr</authors>
		<!-- projectUrl is required for the community feed -->
		<projectUrl>https://github.com/vultr/vultr-cli</projectUrl>
		<iconUrl>https://cdn.jsdelivr.net/gh/mikeee/ChocoPackages/icons/vultr-cli.png</iconUrl>
		<copyright>Copyright (c) 2019 Vultr</copyright>
		<!-- If there is a license Url available, it is is required for the community feed -->
		<licenseUrl>https://github.com/vultr/vultr-cli/blob/master/LICENSE</licenseUrl>
		<requireLicenseAcceptance>false</requireLicenseAcceptance>
		<projectSourceUrl>https://github.com/vultr/vultr-cli</projectSourceUrl>
		<!--<docsUrl></docsUrl>-->
		<!--<mailingListUrl></mailingListUrl>-->
		<!--<bugTrackerUrl></bugTrackerUrl>-->
		<tags>vultr-cli vultr cli cloud vps hosting api</tags>
		<summary>A command-line interface for Vultr.</summary>
		<description>`vultr-cli` is a command-line interface for interfacing with the Vultr platform.

## Getting Started

Authentication
In order to use vultr-cli you will need to export your Vultr API KEY

``` bash
$env:VULTR_API_KEY = 'your_api_key'
```

See `vultr-cli help` for a list of up-to-date commands.

``` bash
vultr-cli is a command line interface for the Vultr API

Usage:
  vultr-cli [command]

Available Commands:
  account        Retrieve information about your account
  api-key        retrieve information about the current API key
  apps           Display all available applications
  backups        display all available backups
  bare-metal     bare-metal is used to access bare metal server commands
  block-storage  block storage commands
  dns            dns is used to access dns commands
  firewall       firewall is used to access firewall commands
  help           Help about any command
  iso            iso is used to access iso commands
  network        network interacts with network actions
  object-storage object storage commands
  os             grab all available operating systems
  plans          get information about Vultr plans
  regions        get regions
  reserved-ip    reserved-ip lets you interact with reserved-ip
  script         startup script commands
  server         commands to interact with servers on vultr
  snapshot       snapshot commands
  ssh-key        ssh-key commands
  user           user commands
  version        Display current version of Vultr-cli

Flags:
      --config string   config file (default is $HOME/.vultr-cli.yaml)
  -h, --help            help for vultr-cli
  -t, --toggle          Help message for toggle

Use "vultr-cli [command] --help" for more information about a command.
```

**NOTE**: This package is automatically updated. If it is out of date and there is no newer package submitted, please use the `Contact Maintainers` functionality to alert me.
</description>
		<!-- <releaseNotes></releaseNotes> -->
		<!-- =============================== -->
		<!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
		<!-- <dependencies> -->
			<!-- <dependency id="autohotkey" /> -->
			<!-- <dependency id="" version="[__EXACT_VERSION__]" /> -->
			<!-- <dependency id="chocolatey" version="0.10.8" /> -->
			<!-- <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" /> -->
			<!-- <dependency id="" /> -->
			<!-- <dependency id="chocolatey-uninstall.extension" /> -->
		<!-- </dependencies> -->
		<!-- chocolatey-uninstall.extension - If supporting 0.9.9.x (or below) and including a chocolateyUninstall.ps1 file to uninstall an EXE/MSI, you probably want to include chocolatey-uninstall.extension as a dependency. Please verify whether you are using a helper function from that package. -->
		<!--<provides>NOT YET IMPLEMENTED</provides>-->
		<!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
		<!--<replaces>NOT YET IMPLEMENTED</replaces>-->
	</metadata>
	<files>
		<!-- this section controls what actually gets packaged into the Chocolatey package -->
		<file src="tools\**" target="tools" />
		<!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
	</files>
</package>