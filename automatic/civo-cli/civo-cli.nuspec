<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->
<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->
<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:
* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements
-->
<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
	<metadata>
		<!-- == PACKAGE SPECIFIC SECTION == -->
		<!-- This section is about this package, although id and version have ties back to the software -->
		<!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
		<!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
		<id>civo-cli</id>
		<!-- version should MATCH as closely as possible with the underlying software -->
		<!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
		<!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
		<version>1.4.4</version>
		<packageSourceUrl>https://github.com/mikeee/ChocoPackages/tree/master/automatic/civo-cli</packageSourceUrl>
		<!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
		<owners>mikeee</owners>
		<!-- ============================== -->
		<!-- == SOFTWARE SPECIFIC SECTION == -->
		<!-- This section is about the software itself -->
		<title>civo-cli (Portable)</title>
		<authors>Civo Ltd</authors>
		<!-- projectUrl is required for the community feed -->
		<projectUrl>https://github.com/civo/cli</projectUrl>
		<iconUrl>https://cdn.jsdelivr.net/gh/mikeee/ChocoPackages/icons/civo-cli.png</iconUrl>
		<copyright>Copyright (c) 2019 Civo Ltd</copyright>
		<!-- If there is a license Url available, it is is required for the community feed -->
		<licenseUrl>https://github.com/civo/cli/blob/master/LICENSE</licenseUrl>
		<requireLicenseAcceptance>false</requireLicenseAcceptance>
		<projectSourceUrl>https://github.com/civo/cli</projectSourceUrl>
		<docsUrl>https://www.civo.com/learn/categories/command-line</docsUrl>
		<!--<mailingListUrl></mailingListUrl>-->
		<bugTrackerUrl>https://github.com/civo/cli/issues</bugTrackerUrl>
		<tags>civo cli k3s kubernetes control client cluster</tags>
		<summary>A command-line interface for Civo.</summary>
		<description>`civo` is a command-line interface for interfacing with the Civo platform.

Civo CLI is a tool to manage your Civo.com account from the terminal. The Civo web control panel has a user-friendly interface for managing your account, but in case you want to automate or run scripts on your account, or have multiple complex services, the command-line interface outlined here will be useful. This guide will cover the set-up and usage of the Civo CLI tool with examples.

**NOTE**: This package is automatically updated. If it is out of date and there is no newer package submitted, please use the `Contact Maintainers` functionality to alert me.
</description>
		<!-- <releaseNotes></releaseNotes> -->
		<!-- =============================== -->
		<!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
		<!-- <dependencies> -->
			<!-- <dependency id="autohotkey" /> -->
			<!-- <dependency id="" version="[__EXACT_VERSION__]" /> -->
			<!-- <dependency id="chocolatey" version="0.10.8" /> -->
			<!-- <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" /> -->
			<!-- <dependency id="" /> -->
			<!-- <dependency id="chocolatey-uninstall.extension" /> -->
		<!-- </dependencies> -->
		<!-- chocolatey-uninstall.extension - If supporting 0.9.9.x (or below) and including a chocolateyUninstall.ps1 file to uninstall an EXE/MSI, you probably want to include chocolatey-uninstall.extension as a dependency. Please verify whether you are using a helper function from that package. -->
		<!--<provides>NOT YET IMPLEMENTED</provides>-->
		<!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
		<!--<replaces>NOT YET IMPLEMENTED</replaces>-->
	</metadata>
	<files>
		<!-- this section controls what actually gets packaged into the Chocolatey package -->
		<file src="tools\**" target="tools" />
		<!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
	</files>
</package>